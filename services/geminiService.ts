import { GoogleGenAI, Modality, Type } from "@google/genai";
import { Product, UserProfile } from "../types";

// The API key is hardcoded here to work in environments where .env files are not supported.
const GEMINI_API_KEY = "AIzaSyCJb6kUZSIIILNYkuxF4LlDRTCJBJ4Nx90";

export const isGeminiConfigured = !!GEMINI_API_KEY;

// Lazily initialize the AI client.
let ai: GoogleGenAI | null = null;
const getAi = () => {
    if (!ai) {
        if (!isGeminiConfigured) {
            // This path should not be reachable with a hardcoded key, but it's good practice for robustness.
            throw new Error("Gemini API key not configured. This function should not be called.");
        }
        ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });
    }
    return ai;
}


// --- VIRTUAL TRY-ON ---

export const generateTryOnImage = async (
  userImageBase64: string,
  clothingImageBase64: string
): Promise<string> => {
  const prompt = `Take the clothing item from the second image and place it realistically on the person in the first image. Ensure the fit, lighting, and shadows are natural. The background should remain the same as the first image.`;

  try {
    const response = await getAi().models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          { inlineData: { mimeType: 'image/jpeg', data: userImageBase64 } },
          { inlineData: { mimeType: 'image/png', data: clothingImageBase64 } },
          { text: prompt },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    // Safely access the generated image data
    const candidate = response.candidates?.[0];
    if (!candidate || !candidate.content || !candidate.content.parts) {
      throw new Error("The AI response was empty or invalid. This might be due to content safety filters.");
    }
    
    for (const part of candidate.content.parts) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            return `data:image/png;base64,${base64ImageBytes}`;
        }
    }
    throw new Error("No image was generated by the AI.");

  } catch (error) {
    console.error("Error generating try-on image:", error);
    throw new Error("The AI stylist had trouble creating your look. Please try again.");
  }
};


// --- FIT & STYLE ANALYSIS ---

export const getFitAnalysis = async (
  product: Product,
  userProfile: UserProfile
): Promise<{ size: string; analysis: string }> => {
  const systemInstruction = `You are an AI fashion assistant. Your task is to recommend a clothing size and provide a brief fit analysis based on the user's measurements and the product's details. The user's measurements are in centimeters (cm). If the user's measurements are not provided, state that the analysis is unavailable. Structure your response as a JSON object with two keys: 'size' (e.g., "M", "L", "XL", or "N/A") and 'analysis' (a 1-2 sentence explanation).`;
  
  const userMeasurements = `
    - Height: ${userProfile.height || 'N/A'} cm
    - Weight: ${userProfile.weight || 'N/A'} kg
    - Chest: ${userProfile.chest || 'N/A'} cm
    - Waist: ${userProfile.waist || 'N/A'} cm
    - Hips: ${userProfile.hips || 'N/A'} cm
  `;

  const prompt = `
    Analyze the fit for the following product based on the user's measurements.
    
    Product Details:
    - Name: ${product.name}
    - Category: ${product.category}
    
    User's Measurements:
    ${userMeasurements}

    Provide a size recommendation and a brief analysis.
  `;

  try {
    if (!userProfile.height && !userProfile.weight && !userProfile.chest) {
        return { size: 'N/A', analysis: "Complete your profile with measurements for a size recommendation." };
    }

    const response = await getAi().models.generateContent({
      model: 'gemini-2.5-flash',
      contents: prompt,
      config: {
        systemInstruction: systemInstruction,
        responseMimeType: 'application/json',
        responseSchema: {
          type: Type.OBJECT,
          properties: {
            size: {
              type: Type.STRING,
              description: "The recommended clothing size (e.g., S, M, L, XL) or 'N/A' if not determinable."
            },
            analysis: {
              type: Type.STRING,
              description: "A brief, 1-2 sentence analysis of the fit."
            }
          },
          required: ['size', 'analysis']
        }
      }
    });

    const jsonString = response.text.trim();
    const result = JSON.parse(jsonString);
    return result;

  } catch (error) {
    console.error("Error getting fit analysis:", error);
    return { size: 'N/A', analysis: "AI analysis is currently unavailable. Please try again later." };
  }
};

// FIX: Completed the function which was truncated, causing a return type error.
export const getFashionAdvice = async (
  userInput: string,
  userProfile: UserProfile,
  products: Product[]
): Promise<string> => {
  const systemInstruction = `You are a friendly and knowledgeable AI fashion stylist. Your goal is to provide helpful and concise style advice based on the user's request. Consider the user's profile and the available products. Use markdown for formatting.`;

  const userDetails = `
    Here is some information about the user you are advising:
    - Name: ${userProfile.name || 'N/A'}
    - Height: ${userProfile.height || 'N/A'} cm
    - Weight: ${userProfile.weight || 'N/A'} kg
    - Measurements (Chest/Waist/Hips in cm): ${userProfile.chest || 'N/A'}/${userProfile.waist || 'N/A'}/${userProfile.hips || 'N/A'}
  `;

  const productList = products.length > 0
    ? 'Here is a list of available clothing items:\n' + products.map(p => `- ${p.name} (${p.category})`).join('\n')
    : 'There are no specific products available right now, so give general advice.';

  const prompt = `
    ${userDetails}

    ${productList.substring(0, 3000)}

    The user's request is: "${userInput}"

    Please provide your fashion advice.
  `;
  try {
    const response = await getAi().models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        systemInstruction,
      },
    });
    return response.text;
  } catch (error) {
    console.error("Error getting fashion advice:", error);
    return "I'm sorry, I'm having trouble coming up with advice right now. Please try again in a moment.";
  }
};
